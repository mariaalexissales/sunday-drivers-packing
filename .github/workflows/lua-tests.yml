name: Lua Unit Tests

on:
  push:
    branches: [ main, develop, vanilla-recipe-fixes ]
    paths:
      - 'Contents/mods/SimplePackingVanilla/media/lua/**/*.lua'
      - 'tests/**/*.lua'
      - '.github/workflows/lua-tests.yml'
      - 'simple_packing-scm-1.rockspec'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Contents/mods/SimplePackingVanilla/media/lua/**/*.lua'
      - 'tests/**/*.lua'
      - '.github/workflows/lua-tests.yml'
      - 'simple_packing-scm-1.rockspec'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        lua-version: ['5.1', '5.2', '5.3', '5.4']
        include:
          - lua-version: '5.1'
            primary: true  # Project Zomboid B41 uses Lua 5.1

    name: Test with Lua ${{ matrix.lua-version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Lua ${{ matrix.lua-version }}
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: ${{ matrix.lua-version }}

    - name: Setup LuaRocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Install dependencies
      run: |
        luarocks install luaunit

    - name: List installed packages
      run: luarocks list

    - name: Run tests
      run: |
        echo "Running Lua unit tests for Project Zomboid B41 compatibility..."
        echo "Lua version: $(lua -v)"
        echo ""

        # Create symbolic link for easier path resolution in tests
        ln -sf . simple_packing

        # Run the test suite
        lua tests/run_tests.lua

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-lua-${{ matrix.lua-version }}
        path: |
          test-results.xml
          coverage-report.html
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    name: Lua Lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Lua 5.1
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: '5.1'

    - name: Setup LuaRocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Install luacheck
      run: luarocks install luacheck

    - name: Run luacheck on source code
      run: |
        echo "Running luacheck on simple_functions.lua..."
        luacheck Contents/mods/SimplePackingVanilla/media/lua/server/simple_functions.lua \
          --std=lua51 \
          --globals=Recipe Events ScriptManager print \
          --ignore=212 \
          --no-unused-args \
          || true  # Don't fail the build on lint warnings

    - name: Run luacheck on tests
      run: |
        echo "Running luacheck on test files..."
        luacheck tests/ \
          --std=lua51 \
          --globals=luaunit Recipe Events ScriptManager print \
          --ignore=212 \
          --no-unused-args \
          || true  # Don't fail the build on lint warnings

  coverage:
    runs-on: ubuntu-latest
    name: Test Coverage
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Lua 5.1
      uses: leafo/gh-actions-lua@v10
      with:
        luaVersion: '5.1'

    - name: Setup LuaRocks
      uses: leafo/gh-actions-luarocks@v4

    - name: Install dependencies
      run: |
        luarocks install luaunit
        luarocks install luacov || true  # Optional coverage tool

    - name: Run tests with coverage
      run: |
        if command -v luacov &> /dev/null; then
          echo "Running tests with coverage analysis..."
          lua -lluacov tests/run_tests.lua
          luacov
        else
          echo "Luacov not available, running tests without coverage..."
          lua tests/run_tests.lua
        fi

    - name: Generate coverage report
      if: success()
      run: |
        if [ -f luacov.report.out ]; then
          echo "Coverage Report:"
          echo "================"
          cat luacov.report.out
        else
          echo "No coverage report generated"
        fi

  security:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: Basic security checks
      run: |
        echo "Checking for potential security issues in Lua files..."

        # Check for potential security issues in Lua code
        if grep -r "os\.execute\|io\.popen\|loadstring\|dofile" Contents/mods/SimplePackingVanilla/media/lua/ 2>/dev/null; then
          echo "⚠️  Warning: Found potentially dangerous Lua functions"
          echo "Please review these functions for security implications"
        else
          echo "✅ No obvious security issues found"
        fi

        # Check for hardcoded credentials or sensitive data
        if grep -ri "password\|secret\|token\|key.*=" Contents/mods/SimplePackingVanilla/media/lua/ 2>/dev/null; then
          echo "⚠️  Warning: Found potential hardcoded credentials"
          echo "Please review these matches"
        else
          echo "✅ No hardcoded credentials found"
        fi